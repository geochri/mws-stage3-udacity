let dbpromise,num,restaurant,map;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDatabase(){return idb.open("restaurantDb",1,function(e){e.createObjectStore("restaurantDb",{keyPath:"id"})})}static openReviewDatabase(){return idb.open("reviewsDb",1,function(e){e.createObjectStore("reviewsDb",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id")})}static saveReviewsDatabase(e){return DBHelper.openReviewDatabase().then(t=>{if(!t)return;let r=t.transaction("reviewsDb","readwrite"),n=r.objectStore("reviewsDb");return e.forEach(e=>{n.put(e)}),r.complete})}static reviewsGetCached(e){return(dbpromise=DBHelper.openReviewDatabase()).then(e=>{if(!e)return;return e.transaction("reviewsDb").objectStore("reviewsDb").getAll()}).then(t=>(num=t.filter(t=>t.restaurant_id==parseInt(e)).length,t.filter(t=>t.restaurant_id==parseInt(e)))).catch(e=>console.log(e))}static updateReviewsDb(e){return DBHelper.openReviewDatabase().then(t=>{return t.transaction("reviewsDb","readwrite").objectStore("reviewsDb").add(e)})}static openOutboxDatabase(){return idb.open("outbox",1,function(e){e.createObjectStore("outbox",{keyPath:"createdAt"})})}static saveOutboxDatabase(e){return DBHelper.openOutboxDatabase().then(t=>{if(!t)return;let r=t.transaction("outbox","readwrite");return r.objectStore("outbox").put(e),r.complete})}static pendingForSubmitReviews(e){navigator.onLine&&e.length>0&&e.forEach(e=>{fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e)}).then(clearOutbox())})}static clearOutbox(){if(navigator.onLine)return DBHelper.openOutboxDatabase().then(e=>{let t=e.transaction("outbox","readwrite");return t.objectStore("outbox").clear(),t.complete})}static processAllPendingReviews(){if(navigator.onLine)return DBHelper.openOutboxDatabase().then(e=>{return e.transaction("outbox").objectStore("outbox").getAll()}).then(e=>{e.forEach(function(e){fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e)}).then(t=>{self.reviews.push(t);let r={restaurant_id:e.restaurant_id,name:e.name,rating:e.rating,comments:e.comments,createdAt:e.createdAt,id:num+100};DBHelper.updateReviewsDb(r)}).catch(e=>{callback(e,null)})})})}static saveDatabase(e){return DBHelper.openDatabase().then(function(t){if(!t)return;let r=t.transaction("restaurantDb","readwrite"),n=r.objectStore("restaurantDb");return e.forEach(function(e){n.put(e)}),r.complete})}static updateDb(e,t){return DBHelper.openDatabase().then(t=>{return t.transaction("restaurantDb").objectStore("restaurantDb").get(e,"is_favorite")}).then(e=>{e.is_favorite=t,DBHelper.openDatabase().then(t=>{t.transaction("restaurantDb","readwrite").objectStore("restaurantDb").put(e)})})}static getCachedDb(){return(dbpromise=DBHelper.openDatabase()).then(function(e){if(!e)return;return e.transaction("restaurantDb").objectStore("restaurantDb").getAll()})}static fromApi(){return fetch(DBHelper.DATABASE_URL).then(function(e){return e.json()}).then(e=>(DBHelper.saveDatabase(e),e))}static fetchRestaurants(e){return DBHelper.getCachedDb().then(e=>e.length?Promise.resolve(e):DBHelper.fromApi()).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{const a=n.find(t=>t.id==e);a?t(null,a):t("Restaurant does not exist",null)})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchReview(e){return fetch("http://localhost:1337/reviews").then(function(e){return e.json()}).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchReviewById(e,t){return DBHelper.reviewsGetCached(e).then(t=>t.length>1?Promise.resolve(t):fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(function(e){return e.json()}).then(e=>(DBHelper.saveReviewsDatabase(e),e))).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static postReviews(e){return fetch("http://localhost:1337/reviews/",{method:"POST",body:e}).then(function(e){return e.ok?e.json():[{}]})}static markFavorite(e){let t="";return"true"===self.restaurant.is_favorite?(t=`http://localhost:1337/restaurants/${e}/?is_favorite=true`,console.log(t)):"false"===self.restaurant.is_favorite&&(t=`http://localhost:1337/restaurants/${e}/?is_favorite=false`,console.log(t)),fetch(t,{method:"PUT"}).then(function(e){return e.ok?e.json():[{}]})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),document.getElementById("map").setAttribute("role","application"),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,r)=>{self.restaurant=r,r?(fillRestaurantHTML(),e(null,r)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{self.is_favorite=e.is_favorite;const t=document.getElementById("restaurant-name");t.innerHTML=e.name,"true"===e.is_favorite?t.innerHTML+='<button tabindex="0" aria-label="Mark as unfavorite place" onclick="favButton(this)" class="favorite"></button>':t.innerHTML+='<button tabindex="0" aria-label="Mark as favorite place" onclick="favButton(this)" class="un_favorite"></button>',document.getElementById("restaurant-address").innerHTML=e.address;const r=document.getElementById("restaurant-img");r.className="restaurant-img",r.setAttribute("aria-label",t.innerHTML+" restaurant"),r.setAttribute("alt",t.innerHTML+" restaurant"),r.src=DBHelper.imageUrlForRestaurant(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),DBHelper.processAllPendingReviews(),DBHelper.clearOutbox(),fetchReviewUrl()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let r in e){const n=document.createElement("tr"),a=document.createElement("td");a.innerHTML=r,a.style.color="#525252",n.appendChild(a);const i=document.createElement("td");i.innerHTML=e[r],i.style.color="#525252",n.appendChild(i),t.appendChild(n)}}),favButton=(e=>("true"===self.is_favorite?(e.classList.remove("favorite"),e.classList.add("un_favorite"),self.restaurant.is_favorite="false",self.is_favorite="false",e.setAttribute("aria-label","Mark as favorite")):(self.restaurant.is_favorite="true",self.is_favorite="true",e.setAttribute("aria-label","Mark as unfavorite"),e.classList.remove("un_favorite"),e.classList.add("favorite")),DBHelper.markFavorite(self.restaurant.id),DBHelper.updateDb(self.restaurant.id,self.restaurant.is_favorite))),fetchReviewUrl=(()=>{if(self.review)return;const e=getParameterByName("id");e?DBHelper.fetchReviewById(e,(e,t)=>{if(self.reviews=t,!t)return console.error(e),void fillReviewsHTML(null);fillReviewsHTML()}):error="No restaurant id in URL"}),addReviewButton=(()=>{const e=document.getElementById("reviews-container"),t=document.createElement("button"),r=document.createElement("a");r.innerHTML="Add Review",t.setAttribute("role","button"),t.setAttribute("id","addReviewButton"),t.setAttribute("onclick","reviewForm()"),r.style.color="#fff",t.style.backgroundColor="#854400",t.style.height="35px",t.style.width="100px",t.style.margin="10px",t.style.padding="10px",e.appendChild(t),t.disable=!1,t.hidden=!1,r.setAttribute("href","#reviewForm"),t.appendChild(r)}),reviewForm=(()=>{const e=document.getElementById("addReviewButton");e.disable=!0,e.hidden=!0;const t=document.createElement("form");t.setAttribute("class","review_form"),t.id="reviewForm",t.setAttribute("role","form"),t.setAttribute("tabindex","14"),t.setAttribute("order","0"),document.getElementById("reviews-list").setAttribute("order","1");const r=document.createElement("h2");r.innerHTML="Review Form for",r.setAttribute("role","h2"),r.id="reviewHeader";const n=document.createElement("h3");n.innerHTML=self.restaurant.name,n.setAttribute("role","h3"),n.id="reviewRestaurant";const a=document.createElement("label");a.innerHTML="Name:",a.setAttribute("for","name"),a.id="reviewName",a.setAttribute("role","label");const i=document.createElement("input");i.id="reviewInputName",i.setAttribute("role","input"),i.setAttribute("name","name"),i.setAttribute("placeholder","Enter your Name.."),i.setAttribute("required","true");const s=document.createElement("label");s.id="reviewRating",s.setAttribute("role","label"),s.setAttribute("for","rating"),s.innerHTML="Rating:",s.min="1",s.max="5";const o=document.createElement("input");o.id="reviewInputRating",o.setAttribute("name","rating"),o.setAttribute("role","input"),o.setAttribute("placeholder","Enter your Rating.. From 1 to 5."),o.setAttribute("required","true");const l=document.createElement("label");l.id="reviewComments",l.setAttribute("role","label"),l.setAttribute("for","comments"),l.innerHTML="Comments:";const u=document.createElement("textarea");u.id="reviewInputComments",u.setAttribute("role","input"),u.setAttribute("name","comments"),u.setAttribute("placeholder","Enter your Comments here.. Minimum 90 characters!"),u.setAttribute("required","true");const c=document.createElement("button");c.id="reviewSubmit",c.setAttribute("role","button"),c.setAttribute("type","button"),c.innerHTML="Submit",c.setAttribute("onclick","addReview()"),addChildIntoElement(t,[r,n,a,i,s,o,l,u,c]),document.getElementById("reviews-container").appendChild(t),t.style.height="400px",t.style.display="flex",t.style.flexDirection="column",o.style.width="150px",o.style.marginBottom="5px",i.style.width="150px",i.style.marginBottom="5px",u.style.height="100px",u.style.width="90%",u.style.marginBottom="5px",c.style.width="100px",r.style.marginBottom="10px",n.style.marginBottom="5px"}),checkValidation=(e=>{let t=!0;if(""===e[0]||e[1]<1||e[1]>5||""===e[1]||""===e[2]||e[3]<=90){t=!1;let e="Error! Please fill the empty field, or fix the the invalid input!\nKeep in mind the minimum characters for the comment are 90!!!";console.log(e),alert(e)}return t}),addReview=(()=>{let e=document.getElementById("reviewForm")[0],t=document.getElementById("reviewForm")[1],r=document.getElementById("reviewForm")[2];const n={restaurant_id:self.restaurant.id,name:e.value,rating:t.value,comments:r.value,createdAt:Date.now()};if(lista=[e.value,t.value,r.value,r.textLength],checkValidation(lista))if(navigator.onLine)DBHelper.postReviews(JSON.stringify(n)).then(e=>{self.reviews.push(e),DBHelper.updateReviewsDb(e),setTimeout(()=>{window.location.reload()},100),alert("Status of Submited Review: Success!")}).catch(e=>{self.reviews.push(n),setTimeout(()=>{window.location.reload()},1e3)});else if(!navigator.onLine){DBHelper.saveOutboxDatabase(n),document.getElementById("reviewForm").reset()}}),addChildIntoElement=((e,t)=>{t.forEach(t=>{e.appendChild(t)})}),fillReviewsHTML=((e=self.reviews)=>{const t=document.getElementById("reviews-container"),r=document.createElement("h2");if(r.innerHTML="Reviews",t.appendChild(r),addReviewButton(),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const n=document.getElementById("reviews-list");e.forEach(e=>{n.appendChild(createReviewHTML(e))}),t.appendChild(n)}),createReviewHTML=(e=>{const t=document.createElement("li");t.setAttribute("tabindex","13"),t.setAttribute("role","listitem");const r=document.createElement("p");r.innerHTML=e.name,r.style.textAlign="left",r.style.width="50%",r.style.order="0",r.style.fontWeight="bold",r.style.fontSize="16px",r.style.color="#932C2A",t.appendChild(r);const n=document.createElement("p");n.innerHTML=new Date(e.createdAt).toGMTString(),n.style.textAlign="right",n.style.width="50%",n.style.fontSize="16px",n.style.fontStyle="oblique",n.style.textDecoration="underline",n.style.order="0",t.appendChild(n);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,a.style.backgroundColor="#333333",a.style.borderRadius="5px 5px",a.style.textAlign="center",a.style.fontWeight="bold",a.style.fontSize="17px",a.style.height="25px",a.style.width="100px",a.style.color="#FFB52E",a.style.order="1",t.appendChild(a);const i=document.createElement("p");return i.innerHTML=e.comments,i.style.order="2",i.style.lineHeight="1.6",i.style.textAlign="justify",t.appendChild(i),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),r=document.createElement("li");r.innerHTML=e.name,t.appendChild(r)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const r=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return r?r[2]?decodeURIComponent(r[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
