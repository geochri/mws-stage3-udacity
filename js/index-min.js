let dbpromise,num,restaurants,neighborhoods,cuisines;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDatabase(){return idb.open("restaurantDb",1,function(e){e.createObjectStore("restaurantDb",{keyPath:"id"})})}static openReviewDatabase(){return idb.open("reviewsDb",1,function(e){e.createObjectStore("reviewsDb",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id")})}static saveReviewsDatabase(e){return DBHelper.openReviewDatabase().then(t=>{if(!t)return;let r=t.transaction("reviewsDb","readwrite"),a=r.objectStore("reviewsDb");return e.forEach(e=>{a.put(e)}),r.complete})}static reviewsGetCached(e){return(dbpromise=DBHelper.openReviewDatabase()).then(e=>{if(!e)return;return e.transaction("reviewsDb").objectStore("reviewsDb").getAll()}).then(t=>(num=t.filter(t=>t.restaurant_id==parseInt(e)).length,t.filter(t=>t.restaurant_id==parseInt(e)))).catch(e=>console.log(e))}static updateReviewsDb(e){return DBHelper.openReviewDatabase().then(t=>{return t.transaction("reviewsDb","readwrite").objectStore("reviewsDb").add(e)})}static openOutboxDatabase(){return idb.open("outbox",1,function(e){e.createObjectStore("outbox",{keyPath:"createdAt"})})}static saveOutboxDatabase(e){return DBHelper.openOutboxDatabase().then(t=>{if(!t)return;let r=t.transaction("outbox","readwrite");return r.objectStore("outbox").put(e),r.complete})}static pendingForSubmitReviews(e){navigator.onLine&&e.length>0&&e.forEach(e=>{fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e)}).then(clearOutbox())})}static clearOutbox(){if(navigator.onLine)return DBHelper.openOutboxDatabase().then(e=>{let t=e.transaction("outbox","readwrite");return t.objectStore("outbox").clear(),t.complete})}static processAllPendingReviews(){if(navigator.onLine)return DBHelper.openOutboxDatabase().then(e=>{return e.transaction("outbox").objectStore("outbox").getAll()}).then(e=>{e.forEach(function(e){fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e)}).then(t=>{self.reviews.push(t);let r={restaurant_id:e.restaurant_id,name:e.name,rating:e.rating,comments:e.comments,createdAt:e.createdAt,id:num+100};DBHelper.updateReviewsDb(r)}).catch(e=>{callback(e,null)})})})}static saveDatabase(e){return DBHelper.openDatabase().then(function(t){if(!t)return;let r=t.transaction("restaurantDb","readwrite"),a=r.objectStore("restaurantDb");return e.forEach(function(e){a.put(e)}),r.complete})}static updateDb(e,t){return DBHelper.openDatabase().then(t=>{return t.transaction("restaurantDb").objectStore("restaurantDb").get(e,"is_favorite")}).then(e=>{e.is_favorite=t,DBHelper.openDatabase().then(t=>{t.transaction("restaurantDb","readwrite").objectStore("restaurantDb").put(e)})})}static getCachedDb(){return(dbpromise=DBHelper.openDatabase()).then(function(e){if(!e)return;return e.transaction("restaurantDb").objectStore("restaurantDb").getAll()})}static fromApi(){return fetch(DBHelper.DATABASE_URL).then(function(e){return e.json()}).then(e=>(DBHelper.saveDatabase(e),e))}static fetchRestaurants(e){return DBHelper.getCachedDb().then(e=>e.length?Promise.resolve(e):DBHelper.fromApi()).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{const n=a.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),r(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static fetchReview(e){return fetch("http://localhost:1337/reviews").then(function(e){return e.json()}).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchReviewById(e,t){return DBHelper.reviewsGetCached(e).then(t=>t.length>1?Promise.resolve(t):fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(function(e){return e.json()}).then(e=>(DBHelper.saveReviewsDatabase(e),e))).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static postReviews(e){return fetch("http://localhost:1337/reviews/",{method:"POST",body:e}).then(function(e){return e.ok?e.json():[{}]})}static markFavorite(e){let t="";return"true"===self.restaurant.is_favorite?(t=`http://localhost:1337/restaurants/${e}/?is_favorite=true`,console.log(t)):"false"===self.restaurant.is_favorite&&(t=`http://localhost:1337/restaurants/${e}/?is_favorite=false`,console.log(t)),fetch(t,{method:"PUT"}).then(function(e){return e.ok?e.json():[{}]})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}var map,markers=[];document.addEventListener("DOMContentLoaded",()=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{null!=e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,r.setAttribute("aria-label",e),r.setAttribute("role","option"),t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,r.setAttribute("aria-label",e),r.setAttribute("role","option"),t.append(r)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,a=t.selectedIndex,n=e[r].value,s=t[a].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.setAttribute("role","listitem"),t.setAttribute("tabindex","0");const r=document.createElement("img");r.className="restaurant-img",r.setAttribute("role","img"),r.dataset.src=DBHelper.imageUrlForRestaurant(e);const a=document.createElement("h2");a.innerHTML=e.name,r.setAttribute("aria-label",a.innerHTML+" restaurant"),r.setAttribute("alt",a.innerHTML+" restaurant"),t.append(r),t.append(a);const n=document.createElement("p");n.innerHTML=e.neighborhood,t.append(n);const s=document.createElement("p");s.innerHTML=e.address,t.append(s);const o=document.createElement("a");o.innerHTML="View Details",o.setAttribute("role","link"),o.href=DBHelper.urlForRestaurant(e),t.append(o);const i=document.createElement("span");return"true"===e.is_favorite?i.innerHTML+='<button tabindex="0" aria-label="Mark as favorite place" class="favorite" disabled></button>':i.innerHTML+='<button tabindex="0" aria-label="Mark as unfavorite place" class="un_favorite" disabled></button>',t.append(i),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
